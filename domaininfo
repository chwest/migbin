#!/bin/python
import os
import json
import pandas as pd

uapi_call = os.popen("uapi DomainInfo domains_data api.filter.enable=1 api.filter_column_0=type api.filter_term_0=parked_domain api.filter_type_0=ne api.columns=1 api.columns_0=domain api.columns_1=phpversion api.columns_2=type api.columns_3=documentroot api.sort=1 api.sort_column=type api.sort_method=lexicographic api.sort_reverse=0 --output=jsonpretty format=list | python -m json.tool")
raw_json = uapi_call.read()
parsed_json = json.loads(raw_json)['result']['data']

pwd_call = os.popen("pwd")
pwd = pwd_call.read().rstrip("\n")

domains = []
paths = []
types = []
paths_tmp = []
types_tmp = []
domains_tmp = []

for raw_data in parsed_json:
    paths_tmp.append(raw_data["documentroot"])
    types_tmp.append(raw_data["type"])
    domains_tmp.append(raw_data["domain"])

if pwd in paths_tmp:
    
    path_index = paths_tmp.index(pwd)

    domains.append(domains_tmp[path_index])
    paths.append(paths_tmp[path_index])
    types.append(types_tmp[path_index])

    paths_tmp.pop(path_index)
    domains_tmp.pop(path_index)
    types_tmp.pop(path_index)
    
    print("TRUE")

    for path in paths_tmp:
        path_index1 = paths_tmp.index(path)
        paths.append(paths_tmp[path_index1])
        domains.append(domains_tmp[path_index1])
        types.append(types_tmp[path_index1])

else:
    print('FALSE')
    for raw_data in parsed_json:
        domains.append(raw_data["domain"])
        paths.append(raw_data["documentroot"])
        types.append(raw_data["type"])

d = {'Domain': domains, 'Type': types, 'Document Root': paths}
df = pd.DataFrame(data=d)
df = df[['Domain', 'Type', 'Document Root']]

print(df.to_string(index=False))

uapi_call.close()
pwd_call.close()
